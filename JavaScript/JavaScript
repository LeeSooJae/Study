1. 자바스크립트는 사용자와 상호작용을 하는 언어이다.
2. 웹브라우저는 한번 화면에 출력되면 자기자신을 바꿀수 없다.

BUT 자바스크립트를 이용하면 body 태그를 바꿔줄수 있다.

즉 JS가 HTML을 제어하는 언어이다. 

<input type="button" value="hi" onclick="alert('hi')">
    <input type="text" onchange="alert('changed')">
    <input type="text" onkeydown="alert('key down!')">
    
    on~ 이벤트 약 20개정도 있다.



1=="1" 
> true

1==="1"
> false

위의 예를 보면 알 수 있듯이 ===은 데이터타입까지 완전히 같다는 의미이다. ===의 사용이 강력히 권장.



coworkers.showAll=function(){
        for(var key in coworkers){
          document.write(key+':'+coworksers[key]+'<br>');
        }
      }

      coworkers.showAll();
      
      coworkers가 바뀌면 동작을 안할테니 coworkers = this로 바꿔준다.
      
      JavaScript의 this는 기존 언어에서 사용하던 this와는 다릅니다. 비슷한 의미로 사용될 때도 있지만, JavaScript의 this는 여러 가지 함수가 호출되는 방식(호출 패턴)에 따라 참조(바인딩)하는 객체가 다르기 때문입니다.

자바에서의 this는 인스턴스 자신을 가리키는 참조변수입니다. this가 객체 자신에 대한 참조 값을 가지고 있다는 것입니다. 주로 매개변수와 객체 자신이 가지고 있는 변수의 이름이 같을 경우 이를 구분하기 위해서 사용됩니다.

javascript의 this가 해당 함수 호출 패턴에 따라 어떻게 객체를 참조(바인딩)하는지에 대한 규칙

1. 기본적으로 this는 전역 객체를 참조한다.
2. 메소드 내부의 this는 해당 메소드를 호출한 부모 객체를 참조한다.
3. 생성자 함수 코드 내부의 this는 새로 생성된 객체를 참조한다.
4. call()과 apply() 메소드로 함수를 호출할 때, 함수의 this는 첫 번째 인자로 넘겨받은 객체를 참조한다.
5. 프로토타입 객체 메소드 내부의 this도 해당 메소드를 호출한 부모 객체를 참조한다.
6. JavaScript의 this 키워드는 접근제어자 public 역할을 한다.

JavaScript에서는 내부 함수 호출 패턴을 정의해 놓지 않기 때문입니다. 내부 함수도 결국 함수이므로 이를 호출할 때는 함수 호출로 취급되어 함수 호출 패턴 규칙에 따라 내부 함수의 this는 전역 객체를 참조하게 됩니다.



<input id="night_day" type="button" value="night" onclick=" 
if(document.queruySelector('#night_day').value === "night") 
{
document.queruySelector(body).style.backgroundColor = 'black'; 
document.queruySelector(body).style.color = 'white'; 
document.queruySelector(''#night_day").value = 'day'; 

}else{ 
document.queruySelector(body).style.backgroundColor = 'white';
document.queruySelector(body).style.color = 'black';
document.queruySelector('#night_day').value = night
}



document.queruySelector(#night_day) 라는 태그는 id="night_day" 와 의미가 같다.
의미가 같은 코드가 중복이 되므로 이것은 매우 비효율적인 일이므로
해당 코드를 = this로 바꾸게되면 더 효율적인 코딩이 가능하다 

<input id="night_day" type="button" value="night" onclick="

이 코드안에 있는 onclick 과 같이 이벤트로 실행되는 이 코드들은
이 코드가 속해 있는 태그(ex: input) 의 인덱스 태그
( 인덱스 태그는 해당 태그의 선택자(ex: id , class 등등) 를 의미한다.)
를 대신할수 있는 태그는
this 이다.

그러므로

<input type="butten" value="night" onclick"
if(this.value === "night"){
document.querySelector('body').style.color = 'white'';

이렇게 인덱스 코드를 생략 가능하다.


출처: http://k9e4h.tistory.com/141 [Kim's :D]


var Body = {
  SetColor : function(color){
    document.querySelector('body').style.color = color;
  },
  SetBackgroundColor : function(color){
    document.querySelector('body').style.backgroundColor =color;
  }
}


Body, document : 객체
SetColor, SetBackgroundColo, querySelector('body') : 메소드

라이브러리 : 내가 프로그램을 만들기 위해 필요한 소프트웨어. 부품
프레임워크 : 만들고자 하는 것이 무엇이냐에 따라서 그것을 만들려고 할때 공통적인 부분을 프레임 워크가 만들어 놓고, 
우리가 필요한 부분을 살짝살짝 바꿈(완제품)

라이브러리는 필요한 것을 갖고 와서 작업. 프레임 워크는 안에 들어가서 작업함.

CDN : Content Delivery Network

$('a') : a태그를 J쿼리로 제어하겠다.
UI - 사용자 (User) 가 목적달성을 위해 마주하는 조작체계
API - 프로그래머 (Programmer) 의 개발을 돕기위해 마련된 도구 및 환경


const logCitySkyline = ()=>{
  
};


function logCitySkyline (){
  
}
