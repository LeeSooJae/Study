branch의 원리

gistory의 HEAD을 보면 ref가 있다
f1.txt파일을 생성하고 add하면
refs\heads\master라는 파일이 생긴다.
방금 내가 commit한 아이디가 뜬다.
초기화하면 .git/HEAD가 생성되는데 텍스트 파일이다.
refs/heads/master는 커밋을 처음 한 시점부터 생성된다.
f2.txt가 생성하면
refs/heads/master는 f2.txt를 가리킨다.

git log 를 했을때 2가 최신이라고 알려줄수 있었던 이유는 HEAD덕분이다.
깃은 HEAD라는 파일을 가리키고 있고
HEAD는 refs/heads/master라는 파일을 가리키고 있고,
이 파일은 최근의 커밋한 오브젝트 id를 가지고 있기때문에
git log를 하면 헤드파일을 보고 헤드파일에 있는 마스터파일을 보고 
마스터 파일에 적혀있는 커밋 오브젝트 id값을 통해서 현재 commit된 가장 최신 commit이 무엇인가를 
알아낼 수 있다. 그리고 그 이전 commit은 parent라는 것을 통해서 탐색해 나갈 수 있다.
이것을 통해서 알수 있는 것은 git에서 branch라고 하는 것은 단지 refs라는 디렉토리 안에 있는 파일을 의미한다.

$ rm .git/refs/heads/exp
로 exp를 삭제 했을때 git branch를 보면 exp는 사라져있다.

$ vim .git/refs/heads/exp를 한 후에
최신 커밋의 ID값 6fff3fda34fe3ccaa04d266b626fa3a6378f3b57 를 추가해주면
다시 exp라는 branch가 생성된다.
git에서 branch라는 것은 중요하고 강력하지만, 단지 파일 하나일 뿐이다.
 심지어 binary도 아니고 일반 텍스트 파일이다.

$ git checkout exp를 하면
HEAD는 exp를 가리킨다.



