원격저장소의 원리

$ git remote add origin git@github.com:SooJae/repo.git
 원격 저장소와 연결하기.


[remote "origin"]
	url = git@github.com:SooJae/repo.git //origin이 가리키는 주소
	fetch = +refs/heads/*:refs/remotes/origin/* //어디에서 파일을 가져올것인가.

$ git push --set-upstream origin master
를 하면 master는 origin에 이어진다.

refs\remotes\origin\master
는 원격저장소의 master이다.
를 보면 우리가 origin으로 push한 내용이 나온다.
push했던 기록이 메모처럼 저장된것.(인터넷에서 가져온게 아니다)

refs/heads/master
는 지역저장소의 master이다


* commit 8a95e7ab19e81e8b0b045b6e3c4e00f4eda02502 (HEAD -> master, origin/master                      )
  Author: SooJae <mynameisleesujae@gmail.com>
  Date:   Sun Oct 7 21:02:05 2018 +0900


지역저장소와 원격저장소가 가리키는 commit이 같다.

원격저장소에서 지역저장소로 가져오는 2가지 방법
1. pull
2. fetch

보통은 git pull을 쓰면 된다.

fatal: refusing to merge unrelated histories
라고 뜰때
git pull origin master --allow-unrelated-histories
해주면 해결

git pull 해서 잘못해서 병합하면 ORIG_HEAD로 되돌릴 수 있다.

$ git fetch를 하면 원격저장소가 지역저장소보다 head값이 더높다.
원격저장소 7번을 가리키고 지역저장소는 6번을 가리킴
즉 다운로드를 받았고, 다운로드 받은 최신 commit은 원격저장소에 저장했지만 , 지역저장소에는 저장이 안됌
장점 : 지역저장소에 갖고온다음 병합을 하지 않기 때문에
원격저장소와 지역저장소의 차이점을 볼 수 있다.
$ git diff HEAD origin/master
하면 차이점을 확인 할 수 있다.
그 후에
$ git merge origin/master
을 하면 pull을 했던 것과 똑같이 된다.
git fetch는 원격저장소에서 다운로드를 받고, git merge origin/원격저장소의 병합하고 싶은 branch의 이름

pull을하게되면 다운로드 받고 병합까지.
왠만하면 pull을 사용하고 신중해야 할때 fetch를 쓴다.

releases는 사용자가 사용해도 되는 버젼(정식버젼)

tag는 언제나 똑같은 것을 가리킨다.
branch는 달라진다.

$ git tag 1.0.0 master

현재 태그값을 정한다.

$ git checkout 1.0.0
적고 해당 commit으로 돌아갈수 있다. 어떤 버젼을 배포하고 그 배포한 버젼으로 돌아가고 싶을때.

tag의 세부사항을 포함시키고 싶을때 다른 형태의 tag를 써야햔다.

 annotated tag VS light weight tag(우리가 한것)

$ git tag -a 1.1.0 -m "bug fix"

$ git tag -v 1.1.0 //태그의 설명 보기.
object dc20287b9a4169c4bb9873b72e1295b168e4bb87
type commit
tag 1.1.0
tagger SooJae <mynameisleesujae@gmail.com> 1538920885 +0900

bug fix
error: no signature found

annotated tag는 주석을 달 수 있다.

$ git push 는 tag가 같이 안올라감
$ git push --tags 까지 해야 tag가 같이 올라감

github에서 releases에서 edit들어간뒤 배포하면 latest release가 옆에 뜬다.(별 기능 없고 그냥 보기 편하게 해줌)
또한 edit을 들어가면 오른쪽에 semantic versioning이 있다.
하면 소프트 버젼의 문화를 알 수 있다.(버젼을 어떻게 해야 하는가.)

$ git tag -d 1.1.1
라고하면 tag가 삭제된다.