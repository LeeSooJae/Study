Set : 중복되는 값 X, 순서대로 저장 X
List : 중복되는 값 O, 순서대로 저장 O




Set

A.ContainsAll(B) : B가 A의 부분집합이냐
A.addAll(B) : A와 B의 합집합을 A에 담겠다
A.retainAll(B) : A와 B의 교집합을 A에 담겠다
A.removeAll(B) : A-B (차집합)


Iterator it = (Iterator) A.iterator();
while(it.hasNext()){
System.out.println(it.next());
}

Iterator
인터페이스임

HashSet<Integer> A = new HashSet<Integer>();
A.add(1);
A.add(2);
A.add(3);


Iterator hi = (Iterator) A.iterator();
iterator()라는 메소드의 리턴값은 Iterator에 객체를 리턴하기 때문에, hi는 Iterator라는 데이터타입을 갖고 객체가 된다.
A라고 하는 인스턴스안에 값은 그대로 존재하는데 iterator()라는 메서드를 통해서 hi라고하는 Iterator 인스턴스를 만들게 되면, 
hi라고하는 집합이 생긴다. 그리고 오리지널 값을 갖고있는 (A라는 해쉬셋 안에 들어가있는 1,2,3을 갖고있는) 가상의 컨테이너가 생김
hi.hasnext()를 호출하게 되면, hi라는 이터레이터 안에 들어가있는 값들이 존재하는지 확인.
hi.next()를 호출하면 hi

iterator의 메소드
hasNext, next
